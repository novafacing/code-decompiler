/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: server/proto/decompiler.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./decompile_result";
import * as dependency_2 from "./decompile_request";
import * as dependency_3 from "./decompile_update";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class PingMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        sequence?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("sequence" in data && data.sequence != undefined) {
                this.sequence = data.sequence;
            }
        }
    }
    get sequence() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set sequence(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        sequence?: number;
    }): PingMessage {
        const message = new PingMessage({});
        if (data.sequence != null) {
            message.sequence = data.sequence;
        }
        return message;
    }
    toObject() {
        const data: {
            sequence?: number;
        } = {};
        if (this.sequence != null) {
            data.sequence = this.sequence;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.sequence !== undefined)
            writer.writeInt32(1, this.sequence);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.sequence = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PingMessage {
        return PingMessage.deserialize(bytes);
    }
}
export class PongMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        sequence?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("sequence" in data && data.sequence != undefined) {
                this.sequence = data.sequence;
            }
        }
    }
    get sequence() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set sequence(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        sequence?: number;
    }): PongMessage {
        const message = new PongMessage({});
        if (data.sequence != null) {
            message.sequence = data.sequence;
        }
        return message;
    }
    toObject() {
        const data: {
            sequence?: number;
        } = {};
        if (this.sequence != null) {
            data.sequence = this.sequence;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.sequence !== undefined)
            writer.writeInt32(1, this.sequence);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PongMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PongMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.sequence = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PongMessage {
        return PongMessage.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedDecompilerService {
    static definition = {
        Decompile: {
            path: "/Decompiler/Decompile",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: dependency_2.DecompileRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_2.DecompileRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.DecompileResult) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.DecompileResult.deserialize(new Uint8Array(bytes))
        },
        Update: {
            path: "/Decompiler/Update",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_3.DecompileUpdate) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_3.DecompileUpdate.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.DecompileResult) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.DecompileResult.deserialize(new Uint8Array(bytes))
        },
        Ping: {
            path: "/Decompiler/Ping",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: PingMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => PingMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: PongMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => PongMessage.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Decompile(call: grpc_1.ServerWritableStream<dependency_2.DecompileRequest, dependency_1.DecompileResult>): void;
    abstract Update(call: grpc_1.ServerUnaryCall<dependency_3.DecompileUpdate, dependency_1.DecompileResult>, callback: grpc_1.sendUnaryData<dependency_1.DecompileResult>): void;
    abstract Ping(call: grpc_1.ServerUnaryCall<PingMessage, PongMessage>, callback: grpc_1.sendUnaryData<PongMessage>): void;
}
export class DecompilerClient extends grpc_1.makeGenericClientConstructor(UnimplementedDecompilerService.definition, "Decompiler", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Decompile: GrpcStreamServiceInterface<dependency_2.DecompileRequest, dependency_2.DecompileRequest> = (message: dependency_2.DecompileRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_2.DecompileRequest> => {
        return super.Decompile(message, metadata, options);
    };
    Update: GrpcUnaryServiceInterface<dependency_3.DecompileUpdate, dependency_1.DecompileResult> = (message: dependency_3.DecompileUpdate, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.DecompileResult>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.DecompileResult>, callback?: grpc_1.requestCallback<dependency_1.DecompileResult>): grpc_1.ClientUnaryCall => {
        return super.Update(message, metadata, options, callback);
    };
    Ping: GrpcUnaryServiceInterface<PingMessage, PongMessage> = (message: PingMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PongMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PongMessage>, callback?: grpc_1.requestCallback<PongMessage>): grpc_1.ClientUnaryCall => {
        return super.Ping(message, metadata, options, callback);
    };
}
