/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: server/proto/decompile_result.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class DecompileResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filename?: string;
        function?: string;
        decompilation?: string;
        types?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
            if ("function" in data && data.function != undefined) {
                this.function = data.function;
            }
            if ("decompilation" in data && data.decompilation != undefined) {
                this.decompilation = data.decompilation;
            }
            if ("types" in data && data.types != undefined) {
                this.types = data.types;
            }
        }
        if (!this.types)
            this.types = new Map();
    }
    get filename() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get function() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set function(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get decompilation() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set decompilation(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get types() {
        return pb_1.Message.getField(this, 4) as any as Map<string, string>;
    }
    set types(value: Map<string, string>) {
        pb_1.Message.setField(this, 4, value as any);
    }
    static fromObject(data: {
        filename?: string;
        function?: string;
        decompilation?: string;
        types?: {
            [key: string]: string;
        };
    }): DecompileResult {
        const message = new DecompileResult({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        if (data.function != null) {
            message.function = data.function;
        }
        if (data.decompilation != null) {
            message.decompilation = data.decompilation;
        }
        if (typeof data.types == "object") {
            message.types = new Map(Object.entries(data.types));
        }
        return message;
    }
    toObject() {
        const data: {
            filename?: string;
            function?: string;
            decompilation?: string;
            types?: {
                [key: string]: string;
            };
        } = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        if (this.function != null) {
            data.function = this.function;
        }
        if (this.decompilation != null) {
            data.decompilation = this.decompilation;
        }
        if (this.types.size > 0) {
            data.types = Object.fromEntries(this.types);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.filename === "string" && this.filename.length)
            writer.writeString(1, this.filename);
        if (typeof this.function === "string" && this.function.length)
            writer.writeString(2, this.function);
        if (typeof this.decompilation === "string" && this.decompilation.length)
            writer.writeString(3, this.decompilation);
        for (const [key, value] of this.types) {
            writer.writeMessage(4, this.types, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DecompileResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DecompileResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                case 2:
                    message.function = reader.readString();
                    break;
                case 3:
                    message.decompilation = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.types as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DecompileResult {
        return DecompileResult.deserialize(bytes);
    }
}
